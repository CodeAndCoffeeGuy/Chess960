version: '3.8'

# Production-ready Docker Compose for local development
# This mimics the Kubernetes environment locally

services:
  # Redis Cluster (simplified for local dev)
  redis-master:
    image: redis:7-alpine
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 15000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bullet-chess

  # PostgreSQL with performance settings
  postgresql:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bullet_chess
      POSTGRES_USER: chess_app
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    command: postgres -c 'max_connections=1000' -c 'shared_buffers=256MB' -c 'effective_cache_size=1GB'
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bullet-chess
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chess_app -d bullet_chess"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB with replica set
  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: chess
      MONGO_INITDB_ROOT_PASSWORD: password
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - bullet-chess
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: chess
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: bullet-chess
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - bullet-chess
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Gateway
  websocket-gateway:
    build:
      context: ./services/websocket-gateway
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      WS_PORT: 8080
      HEALTH_PORT: 8081
      METRICS_PORT: 9090
      REDIS_URL: redis://redis-master:6379
      JWT_SECRET: your-jwt-secret-change-in-production
      LOG_LEVEL: info
    ports:
      - "8080:8080"
      - "8081:8081"
      - "9090:9090"
    depends_on:
      redis-master:
        condition: service_started
    networks:
      - bullet-chess
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Game Engine Service
  game-engine:
    build:
      context: ./services/game-engine
      dockerfile: Dockerfile
    environment:
      PORT: 8080
      METRICS_PORT: 9090
      REDIS_URL: redis://redis-master:6379
      MONGODB_URL: mongodb://chess:password@mongodb:27017/bullet_chess?authSource=admin
      LOG_LEVEL: info
    ports:
      - "8082:8080"
      - "9091:9090"
    depends_on:
      redis-master:
        condition: service_started
      mongodb:
        condition: service_healthy
    networks:
      - bullet-chess
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 8080
      METRICS_PORT: 9090
      DATABASE_URL: postgresql://chess_app:password@postgresql:5432/bullet_chess
      REDIS_URL: redis://redis-master:6379
      JWT_SECRET: your-jwt-secret-change-in-production
    ports:
      - "8083:8080"
      - "9092:9090"
    depends_on:
      postgresql:
        condition: service_healthy
      redis-master:
        condition: service_started
    networks:
      - bullet-chess
    deploy:
      replicas: 2

  # Matchmaking Service
  matchmaking-service:
    build:
      context: ./services/matchmaking-service
      dockerfile: Dockerfile
    environment:
      PORT: 8080
      METRICS_PORT: 9090
      REDIS_URL: redis://redis-master:6379
      RABBITMQ_URL: amqp://chess:password@rabbitmq:5672/bullet-chess
    ports:
      - "8084:8080"
      - "9093:9090"
    depends_on:
      redis-master:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - bullet-chess
    deploy:
      replicas: 2

  # API Gateway (nginx)
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - websocket-gateway
      - user-service
      - matchmaking-service
    networks:
      - bullet-chess

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - bullet-chess

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - bullet-chess

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    networks:
      - bullet-chess

networks:
  bullet-chess:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
  postgres_data:
  mongodb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data: