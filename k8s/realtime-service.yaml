apiVersion: v1
kind: ConfigMap
metadata:
  name: realtime-config
  namespace: bullet-chess
data:
  package.json: |
    {
      "name": "@bullet-chess/realtime",
      "version": "1.0.0",
      "main": "index.js",
      "scripts": {
        "start": "node index.js"
      },
      "dependencies": {
        "ws": "^8.13.0",
        "jsonwebtoken": "^9.0.0",
        "redis": "^4.6.0"
      }
    }
  index.js: |
    const WebSocket = require('ws');
    const jwt = require('jsonwebtoken');
    const { createClient } = require('redis');
    const http = require('http');

    // Environment variables
    const PORT = process.env.WS_PORT || 8080;
    const HEALTH_PORT = process.env.HEALTH_PORT || 8081;
    const JWT_SECRET = process.env.JWT_SECRET || 'test-secret';

    // Create HTTP server for health checks
    const healthServer = http.createServer((req, res) => {
      if (req.url === '/health') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ status: 'ok', timestamp: new Date().toISOString() }));
      } else {
        res.writeHead(404);
        res.end('Not Found');
      }
    });

    healthServer.listen(HEALTH_PORT, () => {
      console.log(`Health server listening on port ${HEALTH_PORT}`);
    });

    // Create WebSocket server
    const wss = new WebSocket.Server({ port: PORT });

    console.log(`WebSocket server listening on port ${PORT}`);

    // Connection counter
    let connectionCount = 0;

    wss.on('connection', (ws, req) => {
      connectionCount++;
      console.log(`New connection. Total: ${connectionCount}`);

      // Handle messages
      ws.on('message', (data) => {
        try {
          const message = JSON.parse(data);
          console.log('Received message:', message);

          switch (message.type) {
            case 'hello':
              ws.send(JSON.stringify({
                type: 'auth_required',
                data: { message: 'Please authenticate' }
              }));
              break;

            case 'auth':
              // Simplified auth for testing
              ws.send(JSON.stringify({
                type: 'auth_success',
                data: { userId: message.data?.userId || 'test-user' }
              }));
              break;

            case 'ping':
              ws.send(JSON.stringify({ type: 'pong' }));
              break;

            default:
              ws.send(JSON.stringify({
                type: 'error',
                data: { message: `Unknown message type: ${message.type}` }
              }));
          }
        } catch (error) {
          console.error('Error parsing message:', error);
          ws.send(JSON.stringify({
            type: 'error',
            data: { message: 'Invalid JSON' }
          }));
        }
      });

      ws.on('close', () => {
        connectionCount--;
        console.log(`Connection closed. Total: ${connectionCount}`);
      });

      // Send welcome message
      ws.send(JSON.stringify({
        type: 'welcome',
        data: { message: 'Connected to Bullet Chess WebSocket' }
      }));
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('Shutting down...');
      wss.close(() => {
        process.exit(0);
      });
    });

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: realtime-service
  namespace: bullet-chess
spec:
  replicas: 2
  selector:
    matchLabels:
      app: realtime-service
  template:
    metadata:
      labels:
        app: realtime-service
    spec:
      containers:
      - name: realtime
        image: node:18-alpine
        workingDir: /app
        command: ["sh", "-c"]
        args:
          - |
            cp -r /config/* /app/ && cd /app && npm install && npm start
        ports:
        - containerPort: 8080
          name: websocket
        - containerPort: 8081
          name: health
        env:
        - name: WS_PORT
          value: "8080"
        - name: HEALTH_PORT
          value: "8081"
        - name: JWT_SECRET
          value: "test-secret-change-in-production"
        - name: NODE_ENV
          value: "production"
        volumeMounts:
        - name: app-code
          mountPath: /config
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: app-code
        configMap:
          name: realtime-config

---
apiVersion: v1
kind: Service
metadata:
  name: realtime-service
  namespace: bullet-chess
spec:
  selector:
    app: realtime-service
  ports:
  - name: websocket
    port: 8080
    targetPort: 8080
  - name: health
    port: 8081
    targetPort: 8081